What happens when you initialize a repository? Why do you need to do it?

Initialize a repository in Git Bash using the git init command in the folder in which you want to create a git 
 repository (a hidden folder called .git is created in that folder, containing information about the repository). Run
 git status to see the status of your repository, which presents information about the master, the initial commit, and
 tracked and untracked files.

Creating a repository allows you to use version control for your own files, creating commits and saving and tracking
 different versions of your file. Without this, you can not really use Git for your own programs.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is like your canvas on which you do your work. You get your materials from the artist's palette, that
 is the working directory, and you screenshot your work by committing those changes/work that you've done on your
 canvas, that is the staging area. 
Briefly, the working directory is the directory that contains the files in the repository, and the staging area contains
 the files that you work on whose changes you would put in a single commit. The staging area is an area of liminality;
 it exists between the working directory and the repository and only exists temporarily. The files of the staging area
 enter the staging area through git add, which afterwards gets worked on, and finally leaves the staging area through
 committing the changes done while the files were in the staging area.


How can you use the staging area to make sure you have one commit per logical change?

I control what I put in the staging area and keep track of what I want to change per job. I can control which files I
 would want to modify for a single commit, instead of having all the files in the "staging area" and then losing track
 of what I really need to modify.

 After I make a change, I would add it to the staging area. This is the point where it would be ready to be
  committed. However, if I make another change to the same file, the staging area will not reflect that change until
  I re-add the file to the staging area. But, I would probably want to commit the first change first before adding
  the file back to the staging area. Ultimately, this may motivate me or allow me to see that I should make one
  commit per logical change.


What are some situations when branches would be useful in keeping your history organized? How would branches help?

Branches are useful for making and testing out new features on the side while also maintaining the original code
 for bugs and other smaller fixes and for keeping a working demo of current progres without the new feature, which may
 not be 100% ready yet.
By default, you are in the master branch. Other branches you use can be renamed. In the end, you can choose to merge
 your branches when your tested features work out.
Useful for "context switching"


How do the diagrams help you visualize the branch structure?

Diagrams help see how the branches are layed out and can help keep track of which commits are on which branch, and 
 whether a commit is connected to a particular branch, i.e. whether a commit is "reachable". It can show how each commit
 is connected with the other commits.
Can view a rough diagram of branches in git using the command git log --graph (--oneline) (branch1) (branch2) (etc.).
The end of a branch is called the "tip".


What are the pros and cons of Git's automatic merging vs. always doing merges manually?

P: faster, easier, much more streamlined
C: conflict resolutions, merge conflicts, ambiguity!