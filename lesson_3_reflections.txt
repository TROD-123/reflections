When would you want to use a remote repository rather than keeping all your work local?

A remote repository could be used if you are using a computer that is not your local computer, e.g. in the library. You 
 could always then pull your new work from GitHub onto your own computer, so that everything is in one place saved in a
 local area, useful for if you do not have any internet access.


Why might you want to always pull changes manually rather than having Git automatcally stay up-to-date with your 
 remote repository?

If pushes and pulls are done manually, this allows the user more control over the states of his files, especially if
 there are commits that other contributors have submitted onto GitHub.


Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are copied repositories from another's directory on GitHub to your own. Unless you have permissions to modify the
 origin file, modifications to your fork leave the origin file unmodified from your end. Forking is useful if you want
 to make some changes on someone else's repository on your own computer through cloning, without having to make any
 changes to the original repo. Forks are only created on the GitHub interface, and become a user's repo which can be
 accessed on a user's local machine.

Clones are copies of a repository from GitHub to a local machine, but can also be copies of a repository made on a 
 local machine. Like forks, clones copy all history and states of the original repo.

Branches occur only on the local level, allowing separate "streams" of commits to be applied on a repository, which
 later can be merged into a master branch.


What is the benefit of having a copy of the last known state of the remote stored locally?

An obvious benefit is that Git can keep track of where the last push and pull took place from GitHub to the local
 directory. This allows one to compare the changes that were made on the remote repository from the changes one
 made in the local repository


How would you collaborate with using Git or GitHub? What would be easier, and what would be harder?

Without either of these two software, collaborations would definitely be harder since the two are connected and they
 interact with each other, and with users using it, its so integrative of everyone's changes and can keep things
 organized. Local users can see what their collaborators have submitted to their repository on GitHub, whether they are
 changes to the master branch itself, or an "experimental" change to another branch, and can decide to view those
 changes directly onto their computer and try to merge those changes onto the master branch if needed. With GitHub,
 communication about pull requests (or merge requests) are easily possible and so integrated, making this convenient.
 So, it is definitely easy to collaborate using Git or GitHub. However, mind that I do not know other software that
 would allow for this sort of collaborative effort.

Also, GitHub allows users to examine others repositories by forking them, and then cloning them onto their own local
 directory. What's more, thanks to GitHub allowing for open source projects, users can modify these projects for their
 own use and experimentation, and request that any of these changes be merged with the original repository. 

GitHub is all about collaboration, but it can also be very useful for individual use, for the user to keep track of his
 or her version history, as well as try some experimentations of new features on another workspace than on the master
 branch.